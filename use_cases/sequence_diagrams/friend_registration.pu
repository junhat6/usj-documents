@startuml
actor "参加者／募集者" as User
participant "フロントエンド\n(UI)" as Frontend
participant "バックエンド\n(API)"   as Backend
database "データベース"            as DB
participant "通知サービス\n(Push Gateway)" as PushService

User -> Frontend : フレンド登録画面を開く
Frontend -> Backend : GET /users/{userId}/friends/pending
Backend -> DB : SELECT * FROM friend_requests WHERE toUserId=…
DB --> Backend : pending list
Backend -> Frontend : 200 OK\n[{fromUserId, status, …}, …]
Frontend -> User : 保留中リクエスト表示

User -> Frontend : QRコード読み取り or 検索でユーザー指定
Frontend -> Backend : POST /users/{userId}/friends/requests\n{toUserId}
Backend -> DB : INSERT INTO friend_requests (fromUserId, toUserId, status)
DB --> Backend : 成功レスポンス
Backend -> PushService : PUSH /notifications\n{toUserId, "フレンド申請が届きました"}
PushService -> Frontend : WebSocket Push\n{message}
Frontend -> User : 申請送信完了表示

== 承認フロー ==
participant "相手ユーザー" as TargetUser

TargetUser -> Frontend : 承認画面で「承認」選択
Frontend -> Backend : PUT /users/{userId}/friends/requests/{requestId}\n{status: “accepted”}
Backend -> DB : UPDATE friend_requests SET status=‘accepted’ WHERE id=…
DB --> Backend : 更新結果
Backend -> DB : INSERT INTO friends (userId, friendId)
DB --> Backend : フレンド成立通知
Backend -> PushService : PUSH /notifications\n{fromUserId, "フレンド申請が承認されました"}
PushService -> Frontend : WebSocket Push\n{message}
Frontend -> TargetUser : 承認完了表示
Frontend -> TargetUser : 更新後リスト表示

@enduml
