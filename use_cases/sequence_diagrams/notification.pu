@startuml
actor "参加者／募集者" as User
participant "フロントエンド\n(UI)"        as Frontend
participant "バックエンド\n(API)"         as Backend
participant "通知サービス\n(Push Gateway)" as PushService
database "データベース"                   as DB

User -> Frontend : 通知設定画面を開く
Frontend -> Backend : GET /users/{userId}/notifications/settings
Backend -> DB : SELECT settings FROM notification_settings WHERE userId=…
DB --> Backend : settings
Backend -> Frontend : 200 OK\n{settings}
Frontend -> User : 設定内容表示

User -> Frontend : 通知設定を変更（オン／オフ、タグ選択）
Frontend -> Backend : PUT /users/{userId}/notifications/settings\n{settings}
Backend -> DB : UPDATE notification_settings SET … WHERE userId=…
DB --> Backend : 更新結果
Backend -> Frontend : 200 OK
Frontend -> User : 更新完了メッセージ

== イベント発生時 ==
participant "イベント発生源\n(待ち時間モニタ)" as EventSource
EventSource -> Backend : POST /events/waittime\n{attractionId, wait, tags}
Backend -> DB : INSERT INTO events (…)
DB --> Backend : 保存結果
Backend -> PushService : PUSH /notifications\n{userIds, message}
PushService -> Frontend : WebSocket or Push\n{message}
Frontend -> User : プッシュ通知受信・表示

@enduml
